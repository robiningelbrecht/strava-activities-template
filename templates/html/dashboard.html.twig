{% extends "html/base.html.twig" %}

{% block content %}
    {% autoescape false %}
        <div class="grid grid-cols-1 xl:grid-cols-3 gap-4 mb-4">
            <!-- MOST RECENT ACTIVITIES -->
            <div class="col-span-2 p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold">
                        Most recent activities
                    </h3>
                    <a href="#" data-router-navigate="activities" class="inline-flex items-center p-2 text-sm font-medium rounded-lg text-blue-600 dark:text-blue-500 hover:bg-gray-100 dark:hover:bg-gray-700">
                        View all
                    </a>
                </div>
                <div class="relative overflow-x-scroll">
                    <table class="w-full text-sm text-center text-gray-500 dark:text-gray-400">
                        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" class="px-2 py-3">

                            </th>
                            <th scope="col" class="px-2 py-3 bg-gray-50 dark:bg-gray-700 sticky left-0">

                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('distance') }}
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('elevation') }}
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('time') }}
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('power') }}
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('speed') }}
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('heart-rate') }}
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('calories') }}
                                </div>
                            </th>
                        </tr>
                        </thead>
                        <tbody>
                        {% for activity in mostRecentActivities %}
                            <tr class="{{ cycle(['bg-white border-b dark:bg-gray-900 dark:border-gray-700', 'border-b bg-gray-50 dark:bg-gray-800 dark:border-gray-700'], loop.index0) }}">
                                <td class="px-2 py-2">
                                    <div class="w-[4.5rem]">{{ activity.getStartDate().format('d-m-y') }}</div>
                                </td>
                                <td class="px-2 py-2 truncate sticky left-0 {{ cycle(['bg-white dark:bg-gray-900', 'bg-gray-50 dark:bg-gray-800'], loop.index0) }}">
                                    {{ renderComponent('activity-title', {'activity': activity, 'ellipses': 30}) }}
                                </td>
                                <td class="px-6 py-2 {{ activityHighlights.getLongestDistance() == activity.getDistanceInKilometer() ? 'text-strava-orange font-bold': '' }}">
                                    {{ activity.getDistanceInKilometer()|formatNumber(0) }}<span class="text-xs">km</span>
                                </td>
                                <td class="px-6 py-2 {{ activityHighlights.getHighestElevation() == activity.getElevationInMeter() ? 'text-strava-orange font-bold': '' }}">
                                    <div class="w-[4rem]">{{ activity.getElevationInMeter()|formatNumber(0) }}<span class="text-xs">m</span></div>
                                </td>
                                <td class="px-6 py-2 {{ activityHighlights.getLongestMovingTimeFormatted() == activity.getMovingTimeFormatted() ? 'text-strava-orange font-bold': '' }}">
                                    {{ activity.getMovingTimeFormatted() }}
                                </td>
                                <td class="px-6 py-2 {{ activityHighlights.getHighestAveragePower() == activity.getAveragePower() ? 'text-strava-orange font-bold': '' }}">
                                    {{ activity.getAveragePower() ? activity.getAveragePower() ~ '<span class="text-xs">w</span>': 'n/a' }}
                                </td>
                                <td class="px-6 py-2 {{ activityHighlights.getFastestAverageSpeed() == activity.getAverageSpeedInKmPerH() ? 'text-strava-orange font-bold': '' }}">
                                    {{ activity.getAverageSpeedInKmPerH() }}<span class="text-xs">km/h</span>
                                </td>
                                <td class="px-6 py-2 {{ activityHighlights.getHighestAverageHeartRate() == activity.getAverageHeartRate() ? 'text-strava-orange font-bold': '' }}">
                                    {{ activity.getAverageHeartRate() ?? 'n/a' }}
                                </td>
                                <td class="px-6 py-2 {{ activityHighlights.getCalories() == activity.getCalories() ? 'text-strava-orange font-bold': '' }}">
                                    {{ activity.getCalories() }}<span class="text-xs">kcal</span>
                                </td>
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
            <!-- INTRO -->
            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <p class="mb-3">
                    Since I began cycling
                    <kbd class="px-1 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">{{ intro.getTotalDaysSinceFirstActivity() }}</kbd>
                    ago on <span class="text-sm">{{ intro.getStartDate().format('d-m-Y') }}</span>, I had <kbd class="px-1 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">{{ intro.getTotalDaysOfCycling() }} cycling days</kbd>.
                </p>
                <p class="mb-3">
                    I recorded a total distance of <kbd class="px-1 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">{{ intro.getDistance()|formatNumber(0) }} km</kbd>
                    (<kbd class="px-1 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">{{ (intro.getDistance() / 40075)|formatNumber(2) }}</kbd>
                    trips around the world üåç and
                    <kbd class="px-1 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">{{ (intro.getDistance() / 384400)|formatNumber(3) }}</kbd>
                    trips to the moon üåï), an elevation of <kbd class="px-1 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">{{ intro.getElevation()|formatNumber(0) }} m</kbd>
                    (<kbd class="px-1 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">{{ (intro.getElevation() / 8849)|formatNumber(1) }}</kbd>
                    times Mount Everest üèî) and a total time of <kbd class="px-1 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">{{ intro.getMovingTimeFormatted() }}</kbd> üéâ.
                </p>
                <p>
                    That's a daily average of <kbd class="px-1 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">{{ intro.getDailyAverage()|formatNumber(0) }} km</kbd>,
                    a weekly average of <kbd class="px-1 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">{{ intro.getWeeklyAverage()|formatNumber(0) }} km</kbd>
                    and a monthly average of <kbd class="px-1 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">{{ intro.getMonthlyAverage()|formatNumber(0) }} km</kbd> üê£.
                </p>
                <p>
                    I burned <kbd class="px-1 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">{{ intro.getCalories()|formatNumber(0) }} calories</kbd>
                    doing so, that's about <kbd class="px-1 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">{{ (intro.getCalories() / 270)|formatNumber(0) }}</kbd> pizza slices üçï.
                </p>
            </div>
        </div>
        <!-- WEEKLY DISTANCES -->
        <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
            <h3 class="mb-4 text-lg font-semibold">
                Weekly distances
            </h3>
            <div class="h-80" data-echarts-options='{{ weeklyDistanceChart }}'></div>
        </div>
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 mb-4">
            <!-- BEST POWER OUTPUTS -->
            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <h3 class="mb-4 text-lg font-semibold">
                    Best power outputs over time
                </h3>
                <div class="relative overflow-x-auto">
                    <table class="w-full text-sm text-center text-gray-500 dark:text-gray-400">
                        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" class="px-6 py-3 sticky left-0 bg-gray-50 dark:bg-gray-700">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('time') }}
                                </div>
                            </th>
                            <th scope="col" colspan="2" class="px-2 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('power') }}
                                </div>
                            </th>
                            <th>

                            </th>
                        </tr>
                        </thead>
                        <tbody>
                        {% for powerOutput in powerOutputs %}
                            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                                <td class="px-6 py-2 sticky left-0 bg-white dark:bg-gray-800 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                                    {{ powerOutput.getTime() }}
                                </td>
                                <td class="px-2 py-2">
                                    {{ powerOutput.getPower() }}<span class="text-xs">w</span>
                                </td>
                                <td class="px-2 py-2">
                                    {{ powerOutput.getRelativePower() }}<span class="text-xs">w/kg</span>
                                </td>
                                <td class="px-6 py-2 text-left truncate">
                                    {{ renderComponent('activity-title', {'activity': powerOutput.getActivity()}) }}
                                </td>
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
            <!-- HIGHEST HEART RATES -->
            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <h3 class="mb-4 text-lg font-semibold">
                    Highest heart rate over time
                </h3>
                <div class="relative overflow-x-auto">
                    <table class="w-full text-sm text-center text-gray-500 dark:text-gray-400">
                        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" class="px-6 py-3 sticky left-0 bg-gray-50 dark:bg-gray-700">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('time') }}
                                </div>
                            </th>
                            <th scope="col" class="px-2 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('heart-rate') }}
                                </div>
                            </th>
                            <th>

                            </th>
                        </tr>
                        </thead>
                        <tbody>
                        {% for heartRate in heartRates %}
                            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                                <td class="px-6 py-2 sticky left-0 bg-white dark:bg-gray-800 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                                    {{ heartRate.getTime() }}
                                </td>
                                <td class="px-2 py-2">
                                    {{ heartRate.getRate() }}<span class="text-xs">bpm</span>
                                </td>
                                <td class="px-6 py-2 text-left truncate">
                                    {{ renderComponent('activity-title', {'activity': heartRate.getActivity()}) }}
                                </td>
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <!-- ACTIVITY HEATMAP -->
        <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
            <div class="mb-4 flex items-center">
                <h3 class="font-semibold text-lg">Activity intensity</h3>
                <button class="hidden lg:block" data-popover-target="popover-description" data-popover-placement="right" type="button">
                    <svg class="w-4 h-4 ml-1 text-gray-400 hover:text-gray-500" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path></svg>
                    <span class="sr-only">Show information</span>
                </button>
                <div data-popover id="popover-description" role="tooltip" class="hidden lg:block lg:w-[450px] xl:w-[650px] absolute z-[100] invisible inline-block text-sm text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-sm opacity-0 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-400">
                    <div class="p-3 space-y-2">
                        <p>
                            This map shows the daily training intensity for the last year.
                            The training intensity for an activity is calculated based on several metrics.
                        </p>
                        <h3 class="font-semibold text-gray-900 dark:text-white">Simplified</h3>
                        <p>
                            This formula means that riding for an hour at your max heart rate results in a score of 100, which we consider "high intensity":
                        </p>
                        <blockquote class="p-4 my-4 text-xs border-l-4 border-gray-300 bg-gray-50 dark:border-gray-500 dark:bg-gray-800 italic leading-relaxed text-gray-600 dark:text-white">
                            <span class="font-bold">maxHeartRate </span>= (220 - age) x 0.92<br />
                            <span class="font-bold">intensityFactory </span>= averageHeartRate / maxHeartRate<br />
                            <span class="font-bold">intensity</span> = (durationInSeconds x averageHeartRate x intensityFactor) / (maxHeartRate x 3600) x 100
                        </blockquote>
                        <h3 class="font-semibold text-gray-900 dark:text-white">Advanced</h3>
                        <p>
                            When power metrics and FTP are available, these metrics are used instead.
                            This formula means that riding for an hour at your FTP results in a score of 100, which we consider "high intensity":
                        </p>
                        <blockquote class="p-4 my-4 text-xs border-l-4 border-gray-300 bg-gray-50 dark:border-gray-500 dark:bg-gray-800 italic leading-relaxed text-gray-600 dark:text-white">
                            <span class="font-bold">intensityFactory </span>= (averagePower / FTP)<br />
                            <span class="font-bold">intensity</span> = (durationInSeconds x averagePower x intensityFactor) / (FTP x 3600) x 100
                        </blockquote>
                    </div>
                </div>
            </div>
            <div class="relative overflow-x-auto">
                <div class="h-52 min-w-[800px]" data-echarts-options='{{ activityHeatmapChart }}'></div>
            </div>
        </div>
        <div class="grid grid-cols-1 xl:grid-cols-2 gap-4 mb-4">
            <!-- WEEKDAY STATS -->
            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <h3 class="mb-4 text-lg font-semibold">
                    Stats per weekday
                </h3>
                <div class="h-80" data-echarts-options='{{ weekdayStatsChart }}'></div>
                <div class="relative overflow-x-auto">
                    <table class="w-full text-sm text-center text-gray-500 dark:text-gray-400">
                        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" class="px-2 py-3 sticky left-0 bg-gray-50 dark:bg-gray-700">

                            </th>
                            <th scope="col" class="px-6 py-3">
                                # rides
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('distance') }}
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('elevation') }}
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('time') }}
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('speed') }}
                                </div>
                            </th>
                        </tr>
                        </thead>
                        <tbody>
                        {% for weekday, statistic in weekdayStats.getData() %}
                            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                                <th scope="row" class="px-2 py-2 sticky bg-white dark:bg-gray-800 left-0 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                                    {{ weekday }}
                                </th>
                                <td class="px-6 py-2">
                                    {{ statistic.numberOfRides }}
                                </td>
                                <td class="px-6 py-2 truncate">
                                    {% if statistic.totalDistance > 0 %}
                                        {{ statistic.averageDistance|formatNumber(0) }}<span class="text-xs">km avg</span> /
                                        {{ statistic.totalDistance|formatNumber(0) }}<span class="text-xs">km total</span>
                                    {% else %}
                                        0<span class="text-xs">km</span>
                                    {% endif %}
                                </td>
                                <td class="px-6 py-2 truncate">
                                    {{ statistic.totalElevation|formatNumber(0) }}<span class="text-xs">m</span>
                                </td>
                                <td class="px-6 py-2 truncate">
                                    {{ statistic.movingTimeForHumans }}
                                </td>
                                <td class="px-6 py-2 truncate">
                                    {{ statistic.averageSpeed|formatNumber(1) }}<span class="text-xs">km/h</span>
                                </td>
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
            <!-- DAYTIME STATS -->
            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <h3 class="mb-4 text-lg font-semibold">
                    Daytime stats
                </h3>
                <div class="h-80" data-echarts-options='{{ daytimeStatsChart }}'></div>
                <div class="relative overflow-x-auto">
                    <table class="w-full text-sm text-center text-gray-500 dark:text-gray-400">
                        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" class="px-2 py-3 sticky left-0 bg-gray-50 dark:bg-gray-700">

                            </th>
                            <th scope="col" class="px-6 py-3">
                                # rides
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('distance') }}
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('elevation') }}
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('time') }}
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('speed') }}
                                </div>
                            </th>
                        </tr>
                        </thead>
                        <tbody>
                        {% for statistic in daytimeStats.getData() %}
                            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                                <th scope="row" class="px-2 py-2 sticky left-0 bg-white dark:bg-gray-800 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                                    <div>{{ statistic.daytime.value }}</div>
                                    <div class="font-normal text-xs">{{ statistic.daytime.getHours()[0] }}h - {{ statistic.daytime.getHours()[1] }}h</div>
                                </th>
                                <td class="px-6 py-2">
                                    {{ statistic.numberOfRides }}
                                </td>
                                <td class="px-6 py-2 truncate">
                                    {% if statistic.totalDistance > 0 %}
                                        {{ statistic.averageDistance|formatNumber(0) }}<span class="text-xs">km avg</span> /
                                        {{ statistic.totalDistance|formatNumber(0) }}<span class="text-xs">km total</span>
                                    {% else %}
                                        0<span class="text-xs">km</span>
                                    {% endif %}
                                </td>
                                <td class="px-6 py-2 truncate">
                                    {{ statistic.totalElevation|formatNumber(0) }}<span class="text-xs">m</span>
                                </td>
                                <td class="px-6 py-2 truncate">
                                    {{ statistic.movingTimeForHumans }}
                                </td>
                                <td class="px-6 py-2 truncate">
                                    {{ statistic.averageSpeed|formatNumber(1) }}<span class="text-xs">km/h</span>
                                </td>
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
            <!-- DISTANCE BREAKDOWN -->
            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <h3 class="mb-4 text-lg font-semibold">
                    Distance breakdown
                </h3>
                <div class="relative overflow-x-auto">
                    <table class="w-full text-sm text-center text-gray-500 dark:text-gray-400">
                        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" class="px-2 py-3 sticky left-0 bg-gray-50 dark:bg-gray-700">

                            </th>
                            <th scope="col" class="px-6 py-3">
                                # rides
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('distance') }}
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('elevation') }}
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('time') }}
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('speed') }}
                                </div>
                            </th>
                        </tr>
                        </thead>
                        <tbody>
                        {% for statistic in distanceBreakdown.getRows() %}
                            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                                <th scope="row" class="px-2 py-2 sticky left-0 bg-white dark:bg-gray-800 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                                    <div>{{ statistic.label }}</div>
                                </th>
                                <td class="px-6 py-2">
                                    {{ statistic.numberOfRides }}
                                </td>
                                <td class="px-6 py-2 truncate">
                                    {% if statistic.totalDistance > 0 %}
                                        {{ statistic.averageDistance|formatNumber(0) }}<span class="text-xs">km avg</span> /
                                        {{ statistic.totalDistance|formatNumber(0) }}<span class="text-xs">km total</span>
                                    {% else %}
                                        0<span class="text-xs">km</span>
                                    {% endif %}
                                </td>
                                <td class="px-6 py-2 truncate">
                                    {{ statistic.totalElevation|formatNumber(0) }}<span class="text-xs">m</span>
                                </td>
                                <td class="px-6 py-2 truncate">
                                    {{ statistic.movingTimeForHumans }}
                                </td>
                                <td class="px-6 py-2 truncate">
                                    {{ statistic.averageSpeed|formatNumber(1) }}<span class="text-xs">km/h</span>
                                </td>
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
            <!-- TRIVIA -->
            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <h3 class="mb-4 text-lg font-semibold">
                    Trivia
                </h3>
                <div class="grid grid-cols-2 lg:grid-cols-3 gap-4">
                    <div class="flex flex-col items-center justify-center p-6 border border-gray-200 rounded-lg shadow dark:border-gray-700">
                        <div class="text-center">
                            {% set firstActivity = trivia.getFirstActivity() %}
                            <dd class="text-sm text-gray-500 dark:text-gray-400">First ride</dd>
                            <dt class="mb-1 font-extrabold">{{ firstActivity.getStartDate().format('d-m-Y') }}</dt>
                            <span class="text-xs">
                                {{ renderComponent('activity-title', {'activity': firstActivity, 'ellipses': 30, 'hideIcon': true}) }}
                            </span>
                        </div>
                    </div>
                    <div class="flex flex-col items-center justify-center p-6 border border-gray-200 rounded-lg shadow  dark:border-gray-700">
                        <div class="text-center">
                            {% set earliestActivity = trivia.getEarliestActivity() %}
                            <dd class="text-sm text-gray-500 dark:text-gray-400">Earliest start time</dd>
                            <dt class="mb-1 font-extrabold">{{ earliestActivity.getStartDate().format('H:i') }}</dt>
                            <span class="text-xs">
                                {{ renderComponent('activity-title', {'activity': earliestActivity, 'ellipses': 30, 'hideIcon': true}) }}
                            </span>
                        </div>
                    </div>
                    <div class="flex flex-col items-center justify-center p-6 border border-gray-200 rounded-lg shadow dark:border-gray-700">
                        <div class="text-center">
                            {% set latestActivity = trivia.getLatestActivity() %}
                            <dd class="text-sm text-gray-500 dark:text-gray-400">Latest start time</dd>
                            <dt class="mb-1 font-extrabold">{{ latestActivity.getStartDate().format('H:i') }}</dt>
                            <span class="text-xs">
                                {{ renderComponent('activity-title', {'activity': latestActivity, 'ellipses': 30, 'hideIcon': true}) }}
                            </span>
                        </div>
                    </div>
                    <div class="flex flex-col items-center justify-center p-6 border border-gray-200 rounded-lg shadow dark:border-gray-700">
                        {% set longestActivity = trivia.getLongestActivity() %}
                        <div class="text-center">
                            <dd class="text-sm text-gray-500 dark:text-gray-400">Longest ride</dd>
                            <dt class="mb-1 font-extrabold">{{ longestActivity.getDistanceInKilometer()|formatNumber(0) }}<span class="text-xs">km</span></dt>
                            <span class="text-xs">
                                {{ renderComponent('activity-title', {'activity': longestActivity, 'ellipses': 30, 'hideIcon': true}) }}
                            </span>
                        </div>
                    </div>
                    <div class="flex flex-col items-center justify-center p-6 border border-gray-200 rounded-lg shadow dark:border-gray-700">
                        {% set highestElevationActivity = trivia.getActivityWithHighestElevation() %}
                        <div class="text-center">
                            <dd class="text-sm text-gray-500 dark:text-gray-400">Highest elevation</dd>
                            <dt class="mb-1 font-extrabold">{{ highestElevationActivity.getElevationInMeter()|formatNumber(0) }}<span class="text-xs">m</span></dt>
                            <span class="text-xs">
                                {{ renderComponent('activity-title', {'activity': highestElevationActivity, 'ellipses': 30, 'hideIcon': true}) }}
                            </span>
                        </div>
                    </div>
                    <div class="flex flex-col items-center justify-center p-6 border border-gray-200 rounded-lg shadow dark:border-gray-700">
                        <div class="text-center">
                            {% set fastestActivity = trivia.getFastestActivity() %}
                            <dd class="text-sm text-gray-500 dark:text-gray-400">Fastest ride</dd>
                            <dt class="mb-1 font-extrabold">{{ fastestActivity.getAverageSpeedInKmPerH() }}<span class="text-xs">km/h</span></dt>
                            <span class="text-xs">
                                {{ renderComponent('activity-title', {'activity': fastestActivity, 'ellipses': 30, 'hideIcon': true}) }}
                            </span>
                        </div>
                    </div>
                    <div class="flex flex-col items-center justify-center p-6 border border-gray-200 rounded-lg shadow dark:border-gray-700">
                        <div class="text-center">
                            {% set mostKudosActivity = trivia.getMostKudotedActivity() %}
                            <dd class="text-sm text-gray-500 dark:text-gray-400">Most kudos</dd>
                            <dt class="mb-1 font-extrabold">{{ mostKudosActivity.getKudoCount() }}</dt>
                            <span class="text-xs">
                                {{ renderComponent('activity-title', {'activity': mostKudosActivity, 'ellipses': 30, 'hideIcon': true}) }}
                            </span>
                        </div>
                    </div>
                    <div class="flex flex-col items-center justify-center p-6 border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
                        <div class="text-center">
                            <dd class="text-sm text-gray-500 dark:text-gray-400">Total kudos</dd>
                            <dt class="mb-1 font-extrabold">{{ trivia.getTotalKudosReceived() }}</dt>
                        </div>
                    </div>
                    <div class="flex flex-col items-center justify-center p-6 border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
                        <div class="text-center">
                            {% set mostConsecutiveDaysOfCycling = trivia.getMostConsecutiveDaysOfCycling() %}
                            <dd class="text-sm text-gray-500 dark:text-gray-400">Most consecutive days</dd>
                            <dt class="mb-1 font-extrabold">{{ mostConsecutiveDaysOfCycling|length }}</dt>
                            <div class="text-xs text-gray-500 dark:text-gray-400">
                                {{ mostConsecutiveDaysOfCycling.getEarliestDate().format('d-m-Y') }}
                                <span class="font-medium">-</span>
                                {{ mostConsecutiveDaysOfCycling.getLatestDate().format('d-m-Y') }}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="grid grid-cols-1 gap-4 mb-4">
            <!-- YEARLY DISTANCE STATS -->
            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <h3 class="mb-4 text-lg font-semibold">
                    Yearly distances
                </h3>
                <div class="mb-4 h-[20rem]" data-echarts-options='{{ yearlyDistanceChart }}'></div>
                <div class="relative overflow-x-scroll">
                    <table class="w-full text-sm text-center text-gray-500 dark:text-gray-400">
                        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" class="px-2 py-3 sticky left-0 bg-gray-50 dark:bg-gray-700">
                                Year
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('distance') }}
                                </div>
                            </th>
                            <th>
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('delta') }}
                                    Prev year
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('elevation') }}
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('time') }}
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center justify-center">
                                    {{ renderSvg('calories') }}
                                </div>
                            </th>
                        </tr>
                        </thead>
                        <tbody>
                        {% for statistic in yearlyStatistics.getStatistics() %}
                            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                                <th scope="row" class="px-2 py-2 sticky left-0 bg-white dark:bg-gray-800 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                                    <div>{{ statistic.year }}</div>
                                </th>
                                <td class="px-6 py-2">
                                    {{ statistic.totalDistance|formatNumber(0) }}<span class="text-xs">km</span>
                                </td>
                                <td>
                                    <div class="flex items-center justify-center {{ statistic.differenceInDistanceYearBefore >= 0 ? 'text-green-500 dark:text-green-400': 'text-red-600 dark:text-red-500' }}">
                                        {% if statistic.differenceInDistanceYearBefore is not null %}
                                            {% if statistic.differenceInDistanceYearBefore >= 0 %}
                                                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                                                    <path clip-rule="evenodd" fill-rule="evenodd" d="M10 17a.75.75 0 01-.75-.75V5.612L5.29 9.77a.75.75 0 01-1.08-1.04l5.25-5.5a.75.75 0 011.08 0l5.25 5.5a.75.75 0 11-1.08 1.04l-3.96-4.158V16.25A.75.75 0 0110 17z"></path>
                                                </svg>
                                            {% else %}
                                                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                                                    <path clip-rule="evenodd" fill-rule="evenodd" d="M10 3a.75.75 0 01.75.75v10.638l3.96-4.158a.75.75 0 111.08 1.04l-5.25 5.5a.75.75 0 01-1.08 0l-5.25-5.5a.75.75 0 111.08-1.04l3.96 4.158V3.75A.75.75 0 0110 3z"></path>
                                                </svg>
                                            {% endif %}
                                            <div>
                                                {{ statistic.differenceInDistanceYearBefore|formatNumber(0) }}<span class="text-xs">km</span>
                                            </div>
                                        {% endif %}
                                    </div>
                                </td>
                                <td>
                                    {{ statistic.totalElevation|formatNumber(0) }}<span class="text-xs">m</span>
                                </td>
                                <td>
                                    {{ statistic.movingTime }}
                                </td>
                                <td>
                                    {{ statistic.totalCalories|formatNumber(0) }}<span class="text-xs">kcal</span>
                                </td>
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="grid grid-cols-1 xl:grid-cols-2 gap-4 mb-4">
            <!-- HEART RATE ZONES -->
            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <h3 class="mb-4 text-lg font-semibold">
                    Heart rate zones
                </h3>
                <div class="h-80" data-echarts-options='{{ timeInHeartRateZoneChart }}'></div>
            </div>
            <!-- CHALLENGE CONSISTENCY -->
            <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                <h3 class="mb-4 text-lg font-semibold">
                    Challenge consistency
                </h3>
                <div class="relative overflow-x-auto">
                    <table class="text-sm text-center text-gray-500 dark:text-gray-400">
                        <thead class="text-xs text-gray-700 bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" class="px-2 py-3 sticky left-0 bg-gray-50 dark:bg-gray-700">

                            </th>
                            {% for month in challengeConsistency.getMonths() %}
                                <th scope="col" class="px-3 py-3 [writing-mode:vertical-lr]">
                                    {{ month.getShortLabel() }}
                                </th>
                            {% endfor %}
                        </tr>
                        </thead>
                        <tbody>
                        {% for challenge, achievements in challengeConsistency.getConsistencies() %}
                            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                                <th scope="row" class="px-2 py-2 sticky left-0 text-left bg-white dark:bg-gray-800 border dark:border-gray-700 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                                    {{ challenge }}
                                </th>
                                {% for achieved in achievements %}
                                    <td class="px-3 py-2 border dark:border-gray-700">
                                        {% if achieved %}
                                            <svg class="w-4 h-4 text-green-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill="currentColor" d="m18.774 8.245-.892-.893a1.5 1.5 0 0 1-.437-1.052V5.036a2.484 2.484 0 0 0-2.48-2.48H13.7a1.5 1.5 0 0 1-1.052-.438l-.893-.892a2.484 2.484 0 0 0-3.51 0l-.893.892a1.5 1.5 0 0 1-1.052.437H5.036a2.484 2.484 0 0 0-2.48 2.481V6.3a1.5 1.5 0 0 1-.438 1.052l-.892.893a2.484 2.484 0 0 0 0 3.51l.892.893a1.5 1.5 0 0 1 .437 1.052v1.264a2.484 2.484 0 0 0 2.481 2.481H6.3a1.5 1.5 0 0 1 1.052.437l.893.892a2.484 2.484 0 0 0 3.51 0l.893-.892a1.5 1.5 0 0 1 1.052-.437h1.264a2.484 2.484 0 0 0 2.481-2.48V13.7a1.5 1.5 0 0 1 .437-1.052l.892-.893a2.484 2.484 0 0 0 0-3.51Z"/>
                                                <path fill="#fff" d="M8 13a1 1 0 0 1-.707-.293l-2-2a1 1 0 1 1 1.414-1.414l1.42 1.42 5.318-3.545a1 1 0 0 1 1.11 1.664l-6 4A1 1 0 0 1 8 13Z"/>
                                            </svg>
                                        {% endif %}
                                    </td>
                                {% endfor %}
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <!-- FTP HISTORY -->
        {% if ftpHistoryChart is not empty %}
            <div class="grid grid-cols-1 gap-4 mb-4">
                <div class="p-4 mb-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
                    <h3 class="mb-4 text-lg font-semibold">
                        FTP history
                    </h3>
                    <div class="h-64" data-echarts-options='{{ ftpHistoryChart }}'></div>
                </div>
            </div>
        {% endif %}
    {% endautoescape %}
{% endblock %}